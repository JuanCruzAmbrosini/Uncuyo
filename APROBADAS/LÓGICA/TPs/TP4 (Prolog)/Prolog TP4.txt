concatenate([],X,X).
concatenate([Head|Tail],List,[Head|R]) :-
    concatenate(Tail, List, R).

--------------------------------------------------------------------------------------------------------------------------

flip(Lista, Invertida) :-
    flip_aux(Lista, [], Invertida).
flip_aux([], Acumulador, Acumulador).
flip_aux([H|T], Acumulador, Resultado):-
    flip_aux(T, [H|Acumulador],Resultado).

--------------------------------------------------------------------------------------------------------------------------

get_last([], false).
get_last([X], X).
get_last([_|T], X):-
    get_last(T, X).

-------------------------------------------------------------------------------------------------------------------------

is_sorted([]).
is_sorted([_]).
is_sorted([First, Second|T]) :-
    Second > First,
    is_sorted(T).

--------------------------------------------------------------------------------------------------------------------------

split([],[],[]).
split([H],[H],[]).
split([First, Second|T],[First|T1],[Second|T2]) :-
    split(T,T1,T2).

merge([], [], []).
merge(L,[],L).
merge([],L,L).
merge([H1|T1], [H2|T2], [H1|T]):-
     nonvar(H1), nonvar(H2),
    H1=<H2,
    merge(T1, [H2|T2], T).
merge([H1|T1], [H2|T2], [H2|T]):-
     nonvar(H1), nonvar(H2),
    H2=<H1,
    merge([H1|T1], T2, T).

merge_sorted([], []).
merge_sorted([X],[X]).
merge_sorted(List, Sorted_list):-
    split(List, List1, List2),
    merge_sorted(List1, Sorted_list1),
    merge_sorted(List2, Sorted_list2),
    merge(Sorted_list1, Sorted_list2, Sorted_list).

--------------------------------------------------------------------------------------------------------------------------

split([],[],[]).
split([X],[X],[]).
split([First, Second|T], [First|T1], [Second|T2]):-
    split(T, T1, T2).

merge([],[],[]).
merge(L,[],L).
merge([],L,L).
merge([H1|T1], [H2|T2], [H1|T]):-
    H1 =< H2,
    merge(T1, [H2|T2], T).
merge([H1|T1], [H2|T2], [H2|T]):-
    H2 =< H1,
    merge([H1|T1], T2, T).

merge_sorted([],[]).
merge_sorted([X],[X]).
merge_sorted(List, Sorted_list):-
    split(List, List1, List2),
    merge_sorted(List1, Sorted_list1),
    merge_sorted(List2, Sorted_list2),
    merge(Sorted_list1, Sorted_list2, Sorted_list).

--------------------------------------------------------------------------------------------------------------------------

reverseSum(X, Y, Z):-
    reverseSumAux(X,Y,Z,0).

reverseSumAux(X, Y, Z, X):-
    X =< Z,
    Y is Z - X,
    Y >= X.

reverseSumAux(X, Y, Z, CurX):-
    CurX =< Z,
    CurX1 is CurX + 1,
    reverseSumAux(X, Y, Z, CurX1).

--------------------------------------------------------------------------------------------------------------------------

reverseMult(X, Y, Z):-
    reverseMultAux(X,Y,Z,Z).

reverseMultAux(X,Y,Z,CurX):-
    CurX > 0,
    Z mod CurX =:= 0,
    X is CurX,
    Y is Z // CurX,
     X =< Y.
reverseMultAux(X, Y, Z, CurX):-
    CurX > 1,
    CurX1 is CurX - 1,
    reverseMultAux(X, Y, Z, CurX1).

--------------------------------------------------------------------------------------------------------------------------

factorial(0, 1).

factorial(N, R):-
    N > 0,
    N1 is N - 1,
    factorial(N1,R1),
    R is N * R1.

--------------------------------------------------------------------------------------------------------------------------

fibo(0,0).
fibo(1,1).
fibo(Iteration, FiboNumber):-
    Iteration > 1,
    I1 is Iteration - 1,
    I2 is Iteration - 2,
    fibo(I1,F1),
    fibo(I2,F2),
    FiboNumber is F1 + F2.

--------------------------------------------------------------------------------------------------------------------------

getPosition(Index, List, Element) :-
    getPositionAux(Index, List, 0, Element).

getPositionAux(Index, [H|_], Counter, Element):-
    Counter == Index,
    Element = H.
getPositionAux(Index, [_|T], Counter, Element):-
    Counter1 is Counter + 1,
    getPositionAux(Index, T, Counter1, Element).

--------------------------------------------------------------------------------------------------------------------------

size(List, N):-
    sizeAux(List, 0, N).
sizeAux([],Counter,N):-
    N = Counter.
sizeAux([_|T], Counter, N):-
    Counter1 is Counter + 1,
    sizeAux(T, Counter1, N).

--------------------------------------------------------------------------------------------------------------------------

evaluatePoly(List, X, R):-
    size(List, RealSize),
    evaluatePolyAux(List, X, 0, 0, RealSize, R).
evaluatePolyAux( _, _, Sum, CurrSize, RealSize, R):-
    CurrSize == RealSize,
    R = Sum.
evaluatePolyAux([H|T], X, Sum, CurrSize, RealSize, R):-
    X1 is X**CurrSize,
    Sum1 is (Sum + (H * X1)),
    CurrSize1 is CurrSize + 1,
    evaluatePolyAux(T, X, Sum1, CurrSize1, RealSize, R).



